Simple NetworkAble RFID Controller

Hardware by Lawrence ( Lemming ) Dixon
Software (mostly) by David ( Buzz  ) Bussenschutt 

For up-to-date information, please visit the homepage here: http://www.hsbne.org/projects/SNARC

Please be aware this is still under active development and may change at ANY time.

------------------------------------------------------------------------------
SOFTWARE
------------------------------------------------------------------------------

This *software* is released under the GNU GPL V2 or later. 

There are currently three different possible "usage" scenario/s supported by this formware:
Overview:
 (1)  Standalone system, with fixed list of pre-programmed keys.   Static key-list is programmed at the same time as the firmware.
 (2)  Standalone system, with "console" interface that allows programming new key/s on-demand via the USB inteface.
 (3)  Network-enabled system, which queries a centralised "authentication server" ( written in PHP or similar ) on demand to verify key/s, and cache/s them locally after first use for reliability.

Standalone (1): 
NOTES for manually managing keys inside this sketch, and programming them all at once. :
(a)  you can manually add a LOT of key assignment/s to the list of permitted keys near the bottom of this file ( search for "CODE LIST" )
(b) upload the revised code to the door via arduino
(c)  connect to the door via USB, enter programming mode as instructed, and type "w" into the programming mode.   ( "w" writes all hard-coded keys from the script to the EEPROM ! ) 

Standalone (2):
Keys are individually re-programmed via a USB cable:
 (a) connect a Serial console ( like the Arduino Serial Monitor ) to the RX/TX pins.
 (b) to enter "programming" mode, press reset on the board, and then quickly ( within 3 secs ) send a few keystrokes of data over the serial link , then ENTER( doesn't matter what you type before [enter])
 Once in programming mode:
 (c) 'i' to initialise and wipe the eeprom ( you must do this the first time you use it) , this clears all previously programmed codes, so be warned!
 (d) 'r' to read existing eeprom key list and show them on-screen ( do not use this on a freshly programmed new device or it will hang, use the 'i' command first! ) 
 (e) 'n' to program new a key to EEPROM.
 (f) 'x' to exit programming mode ( or press reset button again)

Network-Enabled (3):
 * After each user swipes their card against the reader, the device scanns the EEPROM cache, and if the key is "known" from previous usage, it is permitted entry.
 * If there is no record of the card, a HTTP query is performed to the "authentication server" ( which is just a URL on the local subnet).  
 * The "server" responds with the "access" level/s that the key has, and if it matches the local door, then the key is both permitted entry, and cached in the EEPROM for later re-use. 
 * All that is required for this server is a web server like "apache", and a simple PHP script that recieves a keycode from the client, and tell the client that key/s permissions. 
 * Example PHP script/s are available in the "server" folder, and these require the keys/permissions to be stored on-disk in JSON format. 
 * Getting you user/key/authentication data onto your "server" can be as simple as writing your own web-gui, or having a "google docs" spreadsheet that auto-downloads to the "server" as required. ( we do this, and it works well ) .

Example Workflow including an authentication server - programming new keys might be done like this:
(1)  record new key assignment ( ie key number, and persons name) in your private "docs" spreadsheet:
(2) press the "Report to Auth Server" -> Do it Now"  button.  Done!
(3) the next time the new person goes to use the door, it will be 5 second approx delay as it pulls the data from the server, and writes it to the EEPROM automatically.   After that it's fast.


TODO:
 (4)  we'd like to make each door so it can have a revised "permitted keys list" pushed to it from the server at any time, but at the moment, the system is a "pull", not a "push".
 (5)  the code to revoke keys over the network from the "permitted" list is non-existnat at the monent, this must be done by wiping the eeprom over the USB connection for now.
